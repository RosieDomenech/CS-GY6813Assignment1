"""
TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"
class ABFile():

 def setLock(self):
 # Returns a lock object to the user program.
 self.lock = createlock()
 self.lock.acquire(True)

 def releaseLock(self):

 self.lock.release()

 def openFiles(self, create = True):
 # Open a file, returning an object of the file type.
 # If create is True, the file is created if it does not exist.
 self.Afile = openfile(self.Afn,create)
 self.Bfile = openfile(self.Bfn,create)

 def closeFiles(self):
 # Close an open file
 self.Afile.close()
 self.Bfile.close()

 def overwriteFile(self, data):
 # Allows the user program to remove a file in their area
 removefile(self.Afn)
 openfile(self.Afn,True).writeat(data,0)
 removefile(self.Bfn)


 def raiseException(self, type):
 #1 = RepyArgumentError
 #2 = SeekPastEndOfFileError
 if (type == 1):
 raise RepyArgumentError
 self.releaseLock()
 elif (type == 2):
 raise SeekPastEndOfFileError
 self.releaseLock()


 def __init__(self,filename,create):
 # globals
 mycontext['debug'] = False
 # local (per object) reference to the underlying file
 self.Afn = filename+'.a'
 self.Bfn = filename+'.b'
 if create:
 # Check if file is present. ListFiles returns a list of file names for the
files in VM
 if self.Afn in listfiles():
 self.openFiles(create)

 # If both filename.a and filename.b are valid, the original file's data is
replaced with the data of filename.b.
 # Write the data of Afile with no offset

 self.Bfile.writeat(self.Afile.readat(None,0),0)
 else:
 # make if the files and add 'SE' to the readat file...
 self.openFiles(create)
 self.Afile.writeat('SE', 0)
 else:
 # We have a backup file. Lets read it if possible...
 if self.Afn in listfiles():
 self.openFiles()

 try:
 self.Bfile.writeat(self.Afile.readat(None,0),0)
 except:
 raise FileNotFoundError
 def writeat(self,data,offset):
 self.setLock()

 fileLength = len(self.Afile.readat(None,0))

 # check the offset of the user input.
 if (offset < 0):
 # Something wrong with how the calling code is using this function or
method, and it is not a fault in the function or method itself
 raiseException(1)

 elif (offset > fileLength):
 # Raised if trying to read past the end of the file.
 raiseException(2)

 else:
 self.Bfile.writeat(data,offset)
 self.releaseLock()
 def readat(self,bytes,offset):
 self.setLock()
 fileLength = len(self.Afile.readat(None,0))

 # check if bytes is null
 if (bytes != None):
 raiseException(2)
 elif (bytes > fileLength):
 raiseException(2)
 elif (offset < 0):
 raiseException(1)
 elif (offset > fileLength):
 raiseException(2)
 else:
 readData = self.Afile.readat(bytes,offset)
 self.releaseLock()
 return readData
 def close(self):
 # create a backup
 originalData = self.Afile.readat(None,0)
 newData = self.Bfile.readat(None,0)

 # Check if file contents starts with 'S' and ends with 'E'
 if (self.Bfile.readat(None,0).startswith("S") and
self.Bfile.readat(None,0).endswith("E")):
 # If we are here, we have a valid close call!
 self.closeFiles()
 self.overwriteFile(newData)
 else:
 # We don't modify the orignal file
 self.closeFiles()
 self.overwriteFile(originalData)
def ABopenfile(filename, create):
 return ABFile(filename,create)
 # The code here sets up type checking and variable hiding for you. You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
 "name":"ABFile",
 "writeat":{"type":"func","args":(str,
(int,long)),"exceptions":Exception,"return":
(int,type(None)),"target":ABFile.writeat},
 "readat":{"type":"func","args":((int,long,type(None)),
(int,long)),"exceptions":Exception,"return":str,"target":ABFile.readat},
 "close":{"type":"func","args":None,"exceptions":None,"return":
(bool,type(None)),"target":ABFile.close}
 }
CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:
(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}
CHILD_CONTEXT_DEF["openfile"] = {TYPE:OBJC,ARGS:
(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}
# Execute the user code
secure_dispatch_module()

"""