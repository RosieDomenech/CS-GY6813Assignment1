TYPE="type"
ARGS="args"
RETURN="return"
EXCP="exceptions"
TARGET="target"
FUNC="func"
OBJC="objc"

class ABFile():
  def _init_(self,filename,create):
    # globals
    mycontext['debug'] = False
    # local (per object) reference to the underlying file
    self.Afn = filename+'.a'
    self.Bfn = filename+'.b'

    # Creating the A/B File
    if create:
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn, create)
        self.Bfile = openfile(self.Bfn, create)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        self.Afile = openfile(self.Afn,create)
        self.Bfile = openfile(self.Bfn,create)
        self.Afile.writeat('SE', 0)
    else:
    # Checking if the backup file is present
      if self.Afn in listfiles():
        self.Afile = openfile(self.Afn,True)
        self.Bfile = openfile(self.Bfn,True)
        self.Bfile.writeat(self.Afile.readat(None,0),0)
      else:
        raise FileNotFoundError

  # writeat Function
  def writeat(self,data,offset):
    #Lock creation
    self.lock = createlock()
    self.lock.acquire(True)

    #validating the write call
    if offset < 0:
      raise ReplyArgumentError
      self.lock.release()
    elif offset > len(self.Bfile.readat(None,0)):
      raise SeekPastEndofFileError
      self.lock.release()
    else:
      # releasing the lock and writing to the file after the validation
      self.Bfile.writeat(data, offset)
      self.lock.release()


  # ReadAt Function
  def readat(self,bytes,offset):
  #Lock creation
    self.lock = createlock()
    self.lock.acquire(True)

    #validating the read call
    length = len(self.Afile.readat(None,0))
    if offset < 0 or length < 0 :
      raise ReplyArgumentError
      self.lock.release()
    elif offset >= len(self.Afile.readat(None,0)):
      raise SeekPastEndofFileError
      self.lock.release()
    else:
      # Handling the exceptions
      try:
        read_data = self.Afile.readat(bytes,offset)
        self.lock.release()
        return read_data
      except:
        raise ReplyArgumentError


  #Close Function
  def close(self):
    backup_data = self.Afile.readat(None,0)
    data = self.Bfile.readat(None,0)
    backupfile = self.Afn
    if self.Bfile.readat(None,0).startswith("S") and self.Bfile.readat(None,0).endswith("E"):
      #If the written file is valid then discard the older version
      self.Afile.close()
      self.Bfile.close()
      removefile(self.Afn)
      openfile(backupfile,True).writeat(data,0)
      removefile(self.Bfn)
    else:
      #If the written file is invalid then discard the invalid file
      self.Afile.close()
      self.Bfile.close()
      removefile(self.Afn)
      openfile(backupfile,True).writeat(backup_data,0)
      removefile(self.Bfn)



def ABopenfile(filename, create):
  return ABFile(filename,create)




# The code here sets up type checking and variable hiding for you.  You
# should not need to change anything below here.
sec_file_def = {"obj-type":ABFile,
                "name":"ABFile",
                "writeat":{"type":"func","args":(str,int),"exceptions":Exception,"return":(int,type(None)),"target":ABFile.writeat},
                "readat":{"type":"func","args":((int,type(None)),(int)),"exceptions":Exception,"return":str,"target":ABFile.readat},
                "close":{"type":"func","args":None,"exceptions":None,"return":(bool,type(None)),"target":ABFile.close}
           }

CHILD_CONTEXT_DEF["ABopenfile"] = {TYPE:OBJC,ARGS:(str,bool),EXCP:Exception,RETURN:sec_file_def,TARGET:ABopenfile}

# Execute the user code
secure_dispatch_module()